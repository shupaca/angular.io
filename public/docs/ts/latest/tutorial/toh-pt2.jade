include ../_util-fns

:marked
  このページでは、Tour of Heroesアプリを展開してヒーローのリストを表示し、
  ユーザーは主人公を選択して主人公の詳細を表示することができます。

  このページが完成したら、このアプリは<live-example> </ live-example>のようになります。

.l-main-section
:marked
  ## あなたがどこで中断したか
  ヒーローのツアーのこのページを続行する前に、
  [The Hero Editor]（./toh-pt1.html）ページの後に次の構造を持っていることを確認してください。
  あなたの構造が一致しない場合は、そのページに戻ってあなたが逃したものを見つけ出してください。

.filetree
  .file angular-tour-of-heroes
  .children
    .file src
    .children
      .file app
      .children
        .file app.component.ts
        .file app.module.ts
      .file main.ts
      .file index.html
      .file styles.css
      .file systemjs.config.js
      .file tsconfig.json
    .file node_modules ...
    .file package.json
:marked
  ## アプリを透明にして実行し続ける
  端末ウィンドウで次のコマンドを入力します。
  
code-example(language="sh" class="code-shell").
  npm start

:marked
  このコマンドは、「時計モード」でTypeScriptコンパイラを実行し、コードが変更されたときに自動的に再コンパイルします。
  このコマンドは、ブラウザでアプリを同時に起動し、コードが変更されたときにブラウザを更新します。

  ブラウザを再コンパイルまたは更新するために一時停止することなく、ヒーローのツアーを構築し続けることができます。

.l-main-section
:marked
  ## ヒーローを表示する
  ヒーローのリストを表示するには、ヒーローをビューのテンプレートに追加します。

  ### ヒーローを作成する
  10人のヒーローの配列を作成します。

+makeExample('toh-2/ts/src/app/app.component.ts', 'hero-array', 'src/app/app.component.ts (hero array)')

:marked
  `HEROES`配列は前のページで定義された` Hero`型です。
  最終的にこのアプリはウェブサービスからヒーローのリストを取得しますが、今のところ
  モックヒーローを表示することができます。

  ###ヒーローを公開する
  ヒーローをバインドするための公開プロパティを `AppComponent`に作成します。

+makeExample('toh-2/ts/src/app/app.component.1.html', 'hero-array-1', 'app.component.ts (hero array property)')

:marked
  `heroes`型は、TypeScriptが` HEROES`配列から推論するので定義されていません。

.l-sub-section
  :marked
    主人公のデータは、クラスの実装から分離されています
    最終的に主人公の名前はデータサービスから来るからです。

:marked
  ### テンプレートにヒーロー名を表示する
  ヒーロー名を順序付けられていないリストに表示するには、
  タイトルの下に英雄の詳細の上に次のHTMLの塊を挿入してください。


+makeExample('toh-2/ts/src/app/app.component.1.html', 'heroes-template-1', 'app.component.ts (heroes template)')(format='.')

:marked
 これでテンプレートに英雄の名前を入力できます。

  ### ngForでヒーローを一覧表示

  目標は、コンポーネント内のヒーローの配列をテンプレートにバインドし、それらを反復処理し、
  個別に表示することができます。

  組込みディレクティブ `* ngFor`を追加して` <li> `タグを修正してください。
  
+makeExample('toh-2/ts/src/app/app.component.1.html', 'heroes-ngfor-1', 'app.component.ts (ngFor)')


.l-sub-section
  :marked
    `ngFor`の接頭辞（` * `）はこの構文の重要な部分です。
    これは、 `<li>`要素とその子要素
    マスターテンプレートを構成する。

    `ngFor`ディレクティブは、コンポーネントの`英雄 `配列を繰り返します
    その配列のヒーローごとにこのテンプレートのインスタンスをレンダリングします。

    式の `let hero`部分は` hero`をテンプレート入力変数として識別し、
    各繰り返しの現在のヒーローアイテムを保持します。
    この変数をテンプレート内で参照して、現在のヒーローのプロパティにアクセスすることができます。

    `ngFor`とテンプレート入力変数の詳細については、
    [* ngForで配列プロパティを表示]（../ guide / displaying-data.html＃ngFor）セクション
    [データの表示]（../ guide / display-data.html）ページと
    [ngFor]（../ guide / template-syntax.html＃ngFor）セクションの
    [テンプレート構文]（../ guide / template-syntax.html）ページ。

:marked
  `<li>`タグ内で、コンテンツを追加する
  ヒーローのプロパティを表示するために `hero`テンプレート変数を使用します。

+makeExample('toh-2/ts/src/app/app.component.1.html', 'ng-for', 'app.component.ts (ngFor template)')(format=".")

:marked
  ブラウザが更新されると、ヒーローのリストが表示されます。

  ###ヒーロースタイル
  ユーザーは、どの主人公にホバーされ、どの主人公が選択されているかを視覚的に確認する必要があります。

  コンポーネントにスタイルを追加するには、 `@ Component`デコレータで` styles`プロパティを設定します
  次のCSSクラスに追加します。
  
+makeExample('toh-2/ts/src/app/app.component.ts', 'styles', 'src/app/app.component.ts (styles)')(format=".")

:marked
  複数行の文字列にはバックティック記法を使用することを忘れないでください。

  これらのスタイルを追加すると、ファイルがかなり長くなります。後のページでは、スタイルを別のファイルに移動します。

  コンポーネントにスタイルを割り当てると、そのコンポーネントはそのコンポーネントに適用されます。
  これらのスタイルは `AppComponent`にのみ適用され、外側のHTMLには影響しません。

  ヒーローを表示するためのテンプレートは、次のようになります。


+makeExample('toh-2/ts/src/app/app.component.1.html', 'heroes-styled', 'src/app/app.component.ts (styled heroes)')(format='.')

.l-main-section
  :marked
    ##英雄を選ぶ
    このアプリでは、詳細ビューにヒーローのリストと単一のヒーローが表示されるようになりました。だけど
    リストと詳細ビューは接続されていません。
    ユーザーがリストからヒーローを選択すると、選択したヒーローが詳細ビューに表示されます。
    このUIパターンは「マスター/詳細」と呼ばれます。
    この場合、_master_はヒーローリストで、_detail_は選択されたヒーローです。

    次に、 `selectedHero`コンポーネントのプロパティを通してマスターをディテールに接続し、
    クリックイベントにバインドされています。

    ###クリックイベントを処理する
    クリックイベントバインディングを `<li>`のように追加する：


  +makeExample('toh-2/ts/src/app/app.component.1.html', 'selectedHero-click', 'app.component.ts (template excerpt)')(format='.')

  :marked
    括弧は `<li>`要素の `click`イベントをターゲットとして識別します。
    `onSelect（hero）`式は、 `AppComponent`メソッド、` onSelect（） `、
    テンプレート入力変数 `hero`を引数として渡します。
    これは `ngFor`ディレクティブで前に定義した` hero`変数と同じです。
  .l-sub-section
    :marked
     イベントバインディングの詳細については、
      [ユーザー入力]（../ guide / user-input.html）ページと
      [イベントバインディング]（../ guide / template-syntax.html＃イベントバインディング）のセクション
      [テンプレート構文]（../ guide / template-syntax.html）ページ。

  :marked
    ### 選択したヒーローを公開するクリックハンドラを追加する
    あなたはもはや単一のヒーローを表示していないので、もはや `hero`プロパティは必要ありません。あなたはヒーローのリストを表示しています。
    しかし、ユーザーは英雄の1つをクリックして選択することができます。
    だから、 `hero`プロパティをこの単純な` selectedHero`プロパティで置き換えてください：

  +makeExample('toh-2/ts/src/app/app.component.ts', 'selected-hero', 'src/app/app.component.ts (selectedHero)')
  :marked
    ユーザーが主人公を選ぶ前に主人公の名前をすべて選択解除する必要があります
    あなたは `英雄 'と同じように` selectedHero`を初期化しません。

    `selectedHero`プロパティをユーザがクリックする` hero`に設定する `onSelect（）`メソッドを追加してください。
  +makeExample('toh-2/ts/src/app/app.component.ts', 'on-select', 'src/app/app.component.ts (onSelect)')(format='.')

  :marked
    テンプレートは引き続き古い `hero`プロパティを参照しています。
    次のように新しい `selectedHero`プロパティにバインドしてください。


  +makeExample('toh-2/ts/src/app/app.component.1.html', 'selectedHero-details', 'app.component.ts (template excerpt)')(format='.')

  :marked
    ### ngIfで空の詳細を隠す

    アプリケーションが読み込まれると、 `selectedHero`は未定義です。
    選択されたヒーローは、ユーザーがヒーローの名前をクリックすると初期化されます。
    Angularは未定義の `selectedHero`のプロパティを表示することができず、次のエラーをスローします。
    ブラウザのコンソールに表示されます。

  code-example(format="nocode").
    EXCEPTION: TypeError: Cannot read property 'name' of undefined in [null]

  :marked
    `selectedHero.name`がテンプレートに表示されますが、
    選択されたヒーローが存在するまで、ヒーローの詳細をDOMから守る必要があります。

    テンプレートのHTMLヒーローの内容を `<div>`で囲みます。
    そして、 `ngIf`組込みディレクティブを追加し、それをコンポーネントの` selectedHero`プロパティに設定します。

  +makeExample('toh-2/ts/src/app/app.component.1.html', 'ng-if', 'src/app/app.component.ts (ngIf)')(format='.')

  .alert.is-critical
    :marked
      `ngIf`の前にアスタリスク（` * `）を忘れないでください。

  :marked
    アプリはもう失敗しなくなり、ブラウザの名前のリストが再び表示されます。

  :marked
    選択されたヒーローが存在しない場合、 `ngIf`ディレクティブはヒーローの詳細HTMLをDOMから削除します。
    ヒーローの詳細要素や心配するバインディングはありません。

    ユーザーが主人公を選ぶと、 `selectedHero`が定義され、
    `ngIf`はヒーローの詳細コンテンツをDOMに入れ、ネストされたバインディングを評価します。

  .l-sub-section
    :marked
      `ngIf`と` ngFor`については、
      [Structural Directives]（../guide/ structural-directives.html）ページと
      [組み込みディレクティブ]（../ guide / template-syntax.html＃ディレクティブ）セクション
      [テンプレート構文]（../ guide / template-syntax.html）ページ。


  :marked
    ### 選択されたヒーローをスタイルする

    選択されたヒーローの詳細はリストの下に表示されますが、リスト内の選択されたヒーローを識別することは困難です。

    上記で追加した `styles`メタデータには` selected`という名前のカスタムCSSクラスがあります。
    選択したヒーローをより目立たせるために、ユーザーがヒーロー名をクリックすると `selected`クラスが` <li> `に適用されます。
    たとえば、ユーザーが「Magneta」をクリックすると、独特の微妙な背景色でレンダリングする必要があります
    このような

  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-selected.png' alt="Selected hero")
  :marked
    テンプレートで、次の `[class.selected]`バインディングを `<li>`に追加してください。
  +makeExample('toh-2/ts/src/app/app.component.1.html', 'class-selected-1', 'app.component.ts (setting the CSS class)')(format=".")
  :marked
    式（ `hero === selectedHero`）が` true`のとき、Angularは `selected` CSSクラスを追加します。
    式が `false`のとき、Angularは` selected`クラスを削除します。


  .l-sub-section
    :marked
      [Template Syntax]（../ guide / template-syntax.html＃ngClass "テンプレート構文：NgClass"）ガイドの `[class]`バインディングの詳細を読んでください。
  
  :marked
    `<li>`の最終版は次のようになります
  +makeExample('toh-2/ts/src/app/app.component.1.html', 'class-selected-2', 'app.component.ts (styling each hero)')(format=".")

  :marked
    "Magneta"をクリックすると、リストは次のようになります

  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-1.png' alt="Output of heroes list app")

  :marked
    ここにはapp.component.tsという完全なものがあります

  +makeExample('toh-2/ts/src/app/app.component.ts', '', 'src/app/app.component.ts')

.l-main-section
:marked
  ## あなたが旅した道
  
  このページであなたが達成したことは次のとおりです。

  * Tour of Heroesアプリには選択可能なヒーローのリストが表示されます。
  *あなたはヒーローを選択し、ヒーローの詳細を表示する機能を追加しました。
  *組み込みディレクティブ `ngIf`と` ngFor`をコンポーネントのテンプレートで使用する方法を学びました。

  あなたのアプリはこの<live-example> </ live-example>のようになります。

  ##先の道
  Tour of Heroesアプリを拡張しましたが、それは完全ではありません。
  アプリはモノリシックなコンポーネントであってはなりません。
  [次のページ]（toh-pt3.html）では、アプリケーションをサブコンポーネントに分割して連携させます。
