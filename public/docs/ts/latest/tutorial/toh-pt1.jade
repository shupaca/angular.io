include ../_util-fns

:marked
  ## ローカルで開発するためのセットアップ
  新しいプロジェクトを作成するには[setup]（../ guide / setup.html）の指示に従います
  <code> angle-tour-of-heroes </ code>という名前です。

  ファイル構造は次のようになります。

.filetree
  .file angular-tour-of-heroes
  .children
    .file src
    .children
      .file app
      .children
        .file app.component.ts
        .file app.module.ts
      .file main.ts
      .file index.html
      .file styles.css
      .file systemjs.config.js
      .file tsconfig.json
    .file node_modules ...
    .file package.json
:marked
  このページが完成したら、このアプリは<live-example> </ live-example>のようになります。

a#keep-transpiling
:marked
  ## アプリを透明にして実行し続ける
  端末ウィンドウで次のコマンドを入力します。

code-example(language="sh" class="code-shell").
  npm start

:marked
  このコマンドは、「時計モード」でTypeScriptコンパイラを実行し、コードが変更されたときに自動的に再コンパイルします。
  このコマンドは、ブラウザでアプリを同時に起動し、コードが変更されたときにブラウザを更新します。

  ブラウザを再コンパイルまたは更新するために一時停止することなく、ヒーローのツアーを構築し続けることができます。

.l-main-section
  :marked
    ## Show the hero
    `AppComponent`に2つのプロパティを追加してください：アプリケーション名の` title`プロパティと `hero`プロパティ
    "風嵐"と呼ばれる英雄のために。

  +makeExample('toh-1/ts/app/app.component.1.ts', 'app-component-1', 'app.component.ts (AppComponent class)')(format=".")

  :marked
    `@ Component`デコレータのテンプレートを、これらの新しいプロパティへのデータバインディングで更新します。

  +makeExample('toh-1/ts/app/app.component.1.ts', 'show-hero',  'app.component.ts (@Component)')(format='.')

  :marked
    ブラウザが更新され、タイトルとヒーロー名が表示されます。

    二重中括弧はAngularの*補間バインディング*構文です。
    これらの補間バインディングは、コンポーネントの `title`と` hero`プロパティ値を表し、
    文字列として、HTMLヘッダータグ内に挿入します。

.l-sub-section
  :marked
    補間の詳細については、[Displaying Data]（../ guide / display-data.html）ページを参照してください。

:marked
  ### ヒーローオブジェクト

  主人公はより多くの特性を必要とします。
  `英雄`をリテラル文字列からクラスに変換する。

  `id`と` name`プロパティを持つ `Hero`クラスを作成します。
  `app.component.ts`ファイルの上部、これらのプロパティをimportステートメントのすぐ下に追加してください。

+makeExample('toh-1/ts/src/app/app.component.ts', 'hero-class-1', 'src/app/app.component.ts (Hero class)')(format=".")

:marked
  `AppComponent`クラスでは、コンポーネントの` hero`プロパティが `Hero`型であるようにリファクタリングします。
  `id`の` 1`と `Windstorm`という名前で初期化します。

+makeExample('toh-1/ts/src/app/app.component.ts', 'hero-property-1', 'src/app/app.component.ts (hero property)')(format=".")

:marked
  ヒーローを文字列からオブジェクトに変更したので、
  ヒーローの `name`プロパティを参照するようにテンプレート内のバインディングを更新します。

+makeExample('toh-1/ts/app/app.component.1.ts', 'show-hero-2')
:marked
  ブラウザが更新され、主人公の名前が表示され続けます。

  ### 複数行のテンプレート文字列でのHTMLの追加

  ヒーローのすべての特性を示すために、
  ヒーローの `id`プロパティに` <div> `を追加し、ヒーローの` name`にもう一つ `<div>を追加します。
  テンプレートを読み込み可能にするには、それぞれの `<div>`をそれ自身の行に置きます。

  コンポーネントテンプレートのバッククォートでは、 `<h1>`、 `<h2>`、および `<div>`要素をそれぞれの行に置くことができます。
  ES2015とTypeScriptの<i>テンプレートリテラル</ i>機能のおかげです。詳細は、次を参照してください。
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" title="template literal">Template literals</a>.


+makeExample('toh-1/ts/app/app.component.1.ts', 'multi-line-strings', 'app.component.ts (AppComponent\'s template)')(format='.')

.l-main-section
:marked
  ## 主人公の名前を編集する

  ユーザーは `<input>`テキストボックスで英雄の名前を編集できるはずです。
  テキストボックスは、ヒーローの `name`プロパティを_display_
  ユーザーが入力する_update_そのプロパティ。

  `<input>`フォーム要素と `hero.name`プロパティの間に双方向バインディングが必要です。

  ### 双方向バインディング

  テンプレートのヒーロー名をリファクタリングして、次のようにします。
+makeExample('toh-1/ts/app/app.component.1.ts', 'name-input')(format='.')

:marked
  `[（ngModel）]`は、 `hero.name`プロパティをバインドするAngular構文です
  テキストボックスに。
  データは両方向に流れます：プロパティからテキストボックスまで_
  テキストボックスからプロパティに戻ります。

  残念ながら、この変更の直後に、アプリケーションは中断します。
  ブラウザのコンソールで見ると、Angularが
  "` ngModel` ...は `input`のプロパティとして知られていません。"

  `NgModel`は有効なAngularディレクティブですが、デフォルトでは使用できません。
  オプションのFormsModuleに属します。
  そのモジュールの使用をオプトインする必要があります。
  
  ### _FormsModule_をインポートする

  `app.module.ts`ファイルを開き、` @ angular / forms`ライブラリから `FormsModule`シンボルをインポートします。
  次に、 `FormsModule`を` @ NgModule`メタデータの `imports`配列に追加します。これにはリストが含まれています
  アプリが使用する外部モジュールの

  更新された `AppModule`は次のようになります
+makeExample('toh-1/ts/src/app/app.module.ts', '', 'app.module.ts (FormsModule import)')

.l-sub-section
  :marked
    `FormsModule`と` ngModel`の詳細については、
    [ngModelとの双方向データバインディング]（../ guide / forms.html＃ngModel）セクション
    [Forms]（../ guide / forms.html）ガイドと
    [NgModelとの双方向バインディング]（../ guide / template-syntax.html＃ngModel）セクション
    [Template Syntax]（../ guide / template-syntax.html）ガイド。

:marked
  ブラウザが更新されると、アプリは再び動作するはずです。
  主人公の名前を編集して、テキストボックスの上の `<h2>`に反映された変更を見ることができます。

.l-main-section
:marked
  ## あなたが旅した道
  
  あなたが造ったものを取りなさい。

  * Tour of Heroesアプリは、補間の二重中カッコ（片方向データバインディングの一種）を使用しています。
  `Hero`オブジェクトのアプリケーションタイトルとプロパティを表示します。
  * ES2015のテンプレートリテラルを使用して複数行のテンプレートを作成し、テンプレートを読みやすくしました。
  *あなたは `<input>`要素への双方向データバインディングを追加しました
  組み込みの `ngModel`ディレクティブを使用します。このバインディングは、ヒーローの名前を表示し、ユーザーがそれを変更できるようにします。
  * `ngModel`ディレクティブは、` hero.name`の他のすべてのバインディングに変更を伝播します。

  あなたのアプリはこの<live-example> </ live-example>のようになります。

  ここには完全な `app.component.ts`があります。
  
+makeExample('toh-1/ts/src/app/app.component.ts', '', 'src/app/app.component.ts')


.l-main-section
:marked
  ## 前の道
  [次のチュートリアルのページ]（./ toh-pt2.html）では、ヒーローのアプリを構築してヒーローのリストを表示します。
  ユーザーはヒーローを選択してその詳細を表示することもできます。
  リストを取得してテンプレートにバインドする方法の詳細を学習します。
