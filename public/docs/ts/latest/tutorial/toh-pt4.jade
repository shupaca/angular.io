include ../_util-fns

:marked
  Tour of Heroesアプリが進化するにつれて、ヒーローデータにアクセスする必要のあるコンポーネントを追加します。

  同じコードを繰り返しコピーして貼り付ける代わりに、
  1つの再利用可能なデータサービスを作成し、
  それを必要とするコンポーネントに注入します。
  別のサービスを使用すると、コンポーネントの傾きがなくなり、ビューのサポートに専念できます。
  モックサービスでコンポーネントの単体テストを容易にします。

  データサービスは常に非同期であるため、
  データサービスの* Promise *ベースのバージョンでページを完成させます。

  このページが完成したら、このアプリは<live-example> </ live-example>のようになります。

.l-main-section
:marked
  ##中断したところ
  ヒーローツアーに進む前に、次の構造を持っていることを確認してください。
  そうでない場合は、前のページに戻ります。

.filetree
  .file angular-tour-of-heroes
  .children
    .file src
    .children
      .file app
      .children
        .file app.component.ts
        .file app.module.ts
        .file hero.ts
        .file hero-detail.component.ts
      .file main.ts
      .file index.html
      .file styles.css
      .file systemjs.config.js
      .file tsconfig.json
    .file node_modules ...
    .file package.json

:marked
 ##アプリを透明にして走らせ続ける
  端末ウィンドウで次のコマンドを入力します。

code-example(language="sh" class="code-shell").
  npm start

:marked
  このコマンドは、「時計モード」でTypeScriptコンパイラを実行し、コードが変更されたときに自動的に再コンパイルします。
  このコマンドは、ブラウザでアプリを同時に起動し、コードが変更されたときにブラウザを更新します。

  ブラウザを再コンパイルまたは更新するために一時停止することなく、ヒーローのツアーを構築し続けることができます。

  ##ヒーローサービスを作る
  ステークホルダーは、ヒーローをさまざまな方法でさまざまなページに表示したいと考えています。
  ユーザーはすでにリストからヒーローを選択することができます。
  すぐに、最高のヒーローを持つダッシュボードを追加し、ヒーローの詳細を編集するための別のビューを作成します。
  3つのビューにはヒーローデータが必要です。

  現在のところ、 `AppComponent`は表示用のモックヒーローを定義しています。
  しかし、ヒーローを定義することはコンポーネントの仕事ではなく、
  ヒーローのリストを他のコンポーネントやビューと簡単に共有することはできません。
  このページでは、ヒーローデータ取得ビジネスをデータとサービスを提供する単一のサービスに移行します。
  データを必要とするすべてのコンポーネントとそのサービスを共有します。

  ### HeroServiceを作成する
  `app`フォルダに` hero.service.ts`というファイルを作ります。
.l-sub-section
  :marked
    サービスファイルの命名規則は、サービス名の後に `.service`を続けた小文字です。
    複数語のサービス名の場合は、[ダッシュケース]（../ guide / glossary.html＃！＃ダッシュケース）を使用してください。
    例えば、 `SpecialSuperHeroService`のファイル名は` special-super-hero.service.ts`です。
:marked
  `HeroService`クラスに名前をつけて他の人がインポートできるようにエクスポートします。

+makeExample('toh-4/ts/src/app/hero.service.1.ts', 'empty-class', 'src/app/hero.service.ts (starting point)')(format=".")

:marked
  ### 注射可能なサービス
  Angular `Injectable`関数をインポートし、その関数を` @Injectable（） `デコレータとして適用したことに注目してください。
.callout.is-helpful
  :marked
   かっこを忘れないでください。それらを省略すると、診断が難しいエラーが発生します。
:marked
  `@Injectable（）`デコレータは、サービスに関するメタデータを出力するようにTypeScriptに指示します。
  メタデータは、Angularが他の依存関係をこのサービスに注入する必要があることを指定します。

  `HeroService`は現時点では依存関係はありませんが、
  開始から `@Injectable（）`デコレータを適用することで確実に
  一貫性と将来性を保証します。

:marked
  ### ヒーローデータの取得
  `getHeroes（）`メソッドスタブを追加してください。

+makeExample('toh-4/ts/src/app/hero.service.1.ts', 'getHeroes-stub', 'src/app/hero.service.ts (getHeroes stub)')(format=".")


:marked
  `HeroService`はどこからでも` Hero`データを得ることができます。
  Webサービス、ローカルストレージ、または模擬データソースなどがあります。
  コンポーネント手段からのデータアクセスの削除
  いつでも実装について心を変えることができます。
  ヒーローデータを必要とするコンポーネントに触れることなく

  ###モックヒーローのデータを移動する
  `HEROES`配列を` app.component.ts`から切り取り、 `app`フォルダの` mock-heroes.ts`という名前の新しいファイルに貼り付けてください。
  さらに、ヒーロー配列が `Hero`クラスを使用するため、` import {Hero} ... `ステートメントをコピーしてください。

+makeExample('toh-4/ts/src/app/mock-heroes.ts', null, 'src/app/mock-heroes.ts')
:marked
  `HEROES`定数はエクスポートされ、` HeroService`のように他の場所にインポートできます。

  `HEROES`配列を切り取った` app.component.ts`では、
  初期化されていない `heroes`プロパティを追加してください
+makeExample('toh-4/ts/src/app/app.component.1.ts', 'heroes-prop', 'src/app/app.component.ts (heroes property)')(format=".")
:marked
  ###モックされたヒーローデータを返す
  `HeroService`に戻り、模擬` HEROES`をインポートし、 `getHeroes（）`メソッドから返します。
  `HeroService`は次のようになります：
+makeExample('toh-4/ts/src/app/hero.service.1.ts', 'full', 'src/app/hero.service.ts')(format=".")

:marked
 ###ヒーローサービスをインポートする
  `AppComponent`で始まる他のコンポーネントで` HeroService`を使う準備が整いました。

  `HeroService`をインポートして、コード内で参照できるようにします。
+makeExcerpt('toh-4/ts/src/app/app.component.ts', 'hero-service-import', 'src/app/app.component.ts')
:marked
### * HeroServiceで* new *を使用しない*
  `AppComponent`は実行時の具体的な` HeroService`インスタンスをどのように取得すべきですか？

  次のように `HeroService`の新しいインスタンスを` new`で作成することができます：
+makeExample('toh-4/ts/src/app/app.component.1.ts', 'new-service')(format=".")

:marked
  ただし、このオプションは理想的ではありません。理由は次のとおりです。

  *コンポーネントはHeroServiceの作成方法を知っている必要があります。
  `HeroService`コンストラクタを変更した場合、
  サービスを作成したすべての場所を見つけて更新する必要があります。
  複数の場所でコードを修正すると、エラーが発生しやすくなり、テストの負担が増します。
  * `new`を使うたびにサービスを作成します。
  サービスが他の人とキャッシュするヒーローやシェアをキャッシュすればどうなるでしょうか？
  あなたはそれをすることができませんでした。
  * `AppComponent`が` HeroService`の特定の実装にロックされた状態で、
  さまざまなシナリオ（オフラインでの操作、または
  テストのための異なる模擬バージョンは、難しいでしょう。

  ### * HeroServiceを注入する*

  * new *行を使用する代わりに、2行を追加します。

   *プライベートプロパティも定義するコンストラクタを追加します。
   *コンポーネントの `providers`メタデータに追加します。

  コンストラクタを追加します。
+makeExample('toh-4/ts/src/app/app.component.1.ts', 'ctor', 'src/app/app.component.ts (constructor)')
:marked
  コンストラクタ自体は何もしません。パラメータは同時に
  プライベート `heroService`プロパティを定義し、それを` HeroService`注入サイトとして識別します。
:marked
  Angularは `AppComponent`を生成するときに` HeroService`のインスタンスを提供することを知っています。

.l-sub-section
  :marked
    依存関係注入の詳細については、[Dependency Injection]（../ guide / dependency-injection.html）ページを参照してください。
:marked
  * injector *はまだ `HeroService`を作る方法を知らない。
  今すぐコードを実行した場合、Angularはこのエラーで失敗します。

code-example(format="nocode").
    EXCEPTION: No provider for HeroService! (AppComponent -> HeroService)
:marked
  インジェクターに「HeroService」の作り方を教えるには、
  次の `providers`配列プロパティをコンポーネントのメタデータの最後に追加します
  `@ Component`呼び出しの中にあります。


+makeExcerpt('toh-4/ts/src/app/app.component.1.ts', 'providers', 'src/app/app.component.ts')

:marked
  `providers`配列は、` AppComponent`を生成するとき、Angularが `HeroService`の新しいインスタンスを生成するように指示します。
  `AppComponent`とその子コンポーネントは、そのサービスを使用して英雄データを得ることができます。
a#child-component
:marked
  ### * getHeroes（）*は、* AppComponent *
  サービスは `heroService`プライベート変数にあります。

  あなたはサービスを呼び出して、1行でデータを取得することができます。
+makeExample('toh-4/ts/src/app/app.component.1.ts', 'get-heroes')(format=".")
:marked
  あなたは本当に1行をラップするための専用メソッドを必要としません。とにかくそれを書いてください

+makeExcerpt('toh-4/ts/src/app/app.component.1.ts', 'getHeroes', 'src/app/app.component.ts')
<a id="oninit"></a>
:marked
  ### * ngOnInit *ライフサイクルフック
  `AppComponent`はヒーローデータを取り出して表示する必要があります。

   あなたはコンストラクタで `getHeroes（）`メソッドを呼び出すように誘惑されるかもしれませんが、
  コンストラクタは複雑なロジックを含んではいけませんが、
  特に、データアクセスメソッドなどのサーバーを呼び出すコンストラクタです。
  コンストラクタは、プロパティへの配線コンストラクタパラメータのような単純な初期化用です。

  Angular呼び出し `getHeroes（）`を使うには、Angular * ngOnInitライフサイクルフック*を実装することができます。
  Angularは、コンポーネントライフサイクルの重要な瞬間を捉えるためのインターフェイスを提供します。
  創造時、各変化の後、そして最終的な破壊時に行われます。

  各インタフェースには1つのメソッドがあります。コンポーネントがそのメソッドを実装すると、適切なタイミングでAngularがそのメソッドを呼び出します。
.l-sub-section
  :marked
    ライフサイクルフックの詳細については、[Lifecycle Hooks]（../ guide / lifecycle-hooks.html）ページを参照してください。
:marked
  `OnInit`インターフェースの基本的な概要は次のとおりです（これをコードにコピーしないでください）
+makeExample('toh-4/ts/src/app/app.component.1.ts', 'on-init')(format=".")

:marked
  OnInitインタフェースの実装をエクスポート文に追加します
code-example(format="nocode").
  export class AppComponent implements OnInit {}
:marked
  初期化ロジックを内部に持つ `ngOnInit`メソッドを記述してください。角度はそれを呼ぶ
  正確な時に。この場合、 `getHeroes（）`を呼び出すことによって初期化します。
+makeExcerpt('toh-4/ts/src/app/app.component.1.ts', 'ng-on-init', 'app/app.component.ts')
:marked
  アプリは期待通りに動いて、ヒーローのリストとヒーローの詳細ビューを表示する必要があります
  ヒーロー名をクリックすると

<a id="async"></a>
:marked
  ##非同期サービスと約束
  `HeroService`はモックヒーローのリストを直ちに返します。
  その `getHeroes（）`シグネチャは同期しています。
+makeExample('toh-4/ts/src/app/app.component.1.ts', 'get-heroes')(format=".")
:marked
  最終的に、ヒーローデータはリモートサーバーから取得されます。
  リモートサーバーを使用する場合、ユーザーはサーバーが応答するのを待つ必要はありません。
  さらに、待機中にUIをブロックすることはできません。

:marked
  ビューをレスポンスと調整するには、
  * Promises *を使用することができます。これは非同期です
  `getHeroes（）`メソッドのシグネチャを変更する技法です。

  ###英雄のサービスは約束をする

  *プロミス*は、結果が得られると、本質的にコールバックすることを約束します。
  非同期サービスに何らかの作業を行い、コールバック関数を与えるように要求します。
  サービスはその作業を行い、最終的には結果またはエラーで関数を呼び出します。
.l-sub-section
  :marked
    これは簡単な説明です。 ES2015の約束について
    [非同期プログラミングの約束]（http://exploringjs.com/es6/ch_promises.html）のページ
    [Exploring ES6]（http：//exploringjs.com/es6.html）。

:marked
  プロミスが返す `getHeroes（）`メソッドで `HeroService`を更新してください
+makeExample('toh-4/ts/src/app/hero.service.ts', 'get-heroes', 'src/app/hero.service.ts (excerpt)')(format=".")
:marked
  あなたはまだデータを嘲笑しています。あなたは、超高速、ゼロレイテンシのサーバの動作をシミュレートしていますが、
  結果としてモックヒーローと即座に解決されたプロミス*を返すことによって。

  ###約束に従う

  「HeroService」に変更された結果、「this.heroes」は英雄の配列ではなく「Promise」に設定されました。
+makeExample('toh-4/ts/src/app/app.component.1.ts', 'getHeroes', 'src/app/app.component.ts (getHeroes - old)')(format=".")

:marked
  実装を* Promiseに*変更する必要があります。
  `Promise`が成功すれば、あなたは英雄を表示するでしょう。

  コールバック関数をPromiseの `then（）`メソッドの引数として渡します：
+makeExample('toh-4/ts/src/app/app.component.ts', 'get-heroes', 'src/app/app.component.ts (getHeroes - revised)')(format=".")
.l-sub-section
  :marked
    [Arrow関数]（https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions）で説明されているように、
    ES2015矢印機能
    コールバック内の関数は等価な関数式よりも簡潔であり、 `this`をうまく処理します。
:marked
  コールバックは、コンポーネントの `heroes`プロパティをサービスが返すヒーローの配列に設定します。

  アプリはまだ実行中で、ヒーローのリストを表示しています
  詳細ビューで名前選択に応答します。
.l-sub-section
  :marked
    このページの最後に、[付録：遅くする]（＃slow）は、接続が不良でアプリがどのようになっているかを説明しています。
:marked
  ## アプリの構造を確認する
  すべてのリファクタリング後に次の構造を持っていることを確認します。
  
.filetree
  .file angular-tour-of-heroes
  .children
    .file src
    .children
      .file app
      .children
        .file app.component.ts
        .file app.module.ts
        .file hero.ts
        .file hero-detail.component.ts
        .file hero.service.ts
        .file mock-heroes.ts
      .file main.ts
      .file index.html
      .file styles.css
      .file systemjs.config.js
      .file tsconfig.json
    .file node_modules ...
    .file package.json
:marked
  このページで解説するコードファイルは次のとおりです。

+makeTabs(`
  toh-4/ts/src/app/hero.service.ts,
  toh-4/ts/src/app/app.component.ts,
  toh-4/ts/src/app/mock-heroes.ts
  `,'',`
  src/app/hero.service.ts,
  src/app/app.component.ts,
  src/app/mock-heroes.ts
  `)
:marked
  ## あなたが旅した道
  このページであなたが達成したことは次のとおりです。

  *多くのコンポーネントで共有できるサービスクラスを作成しました。
  * `AppComponent`がアクティブになったときに` ngOnInit`ライフサイクルフックを使用してヒーローデータを取得しました。
  * `HeroService`を` AppComponent`のプロバイダとして定義しました。
  *モックヒーローデータを作成してサービスにインポートしました。
  *プロミスとプロミスからデータを取得するコンポーネントを返すようにサービスを設計しました。

  あなたのアプリはこの<live-example> </ live-example>のようになります。

  ##先の道
  Tour of Heroesは、共有コンポーネントとサービスを使用して、より再利用可能になっています。
  次の目標は、ダッシュボードを作成し、ビュー間をルーティングするメニューリンクを追加し、テンプレート内のデータをフォーマットすることです。
  アプリケーションが進化するにつれて、あなたはそれを設計して、容易に成長させ、維持することができるようになります。

  [次のチュートリアル]（toh-pt5.html）ページのビュー間の角型コンポーネントのルーターとナビゲーションについて読んでください。

.l-main-section
<a id="slow"></a>
:marked
  ##付録：遅く取る
  低速接続をシミュレートするには、
  `Hero`シンボルをインポートし、次の` getHeroesSlowly（） `メソッドを` HeroService`に追加してください。
+makeExample('toh-4/ts/src/app/hero.service.ts', 'get-heroes-slowly', 'app/hero.service.ts (getHeroesSlowly)')(format=".")
:marked
  `getHeroes（）`と同様に、 `Promise`も返します。
  しかし、この約束は2秒待ってから、偽のヒーローとの約束を解決します。

  `AppComponent`に戻り、` getHeroes（） `を` getHeroesSlowly（） `に置き換えます。
  アプリの動作を確認してください。
