include ../_util-fns

:marked
 `AppComponent`は現時点で_everything_を実行しています。
  最初は、単一のヒーローの詳細を示しました。
  その後、主人公のリストと主人公の詳細の両方を持つマスター/ディテールフォームになりました。
  まもなく新しい要件と能力が生まれます。
  1つのコンポーネントのフィーチャーの上にフィリングフィーチャーを維持することはできません。それは維持できません。

  それぞれを特定のタスクやワークフローに重点を置いたサブコンポーネントに分割する必要があります。
  最終的に、 `AppComponent`は、それらのサブコンポーネントをホストする単純なシェルになることができます。

  このページでは、ヒーローの詳細を再利用可能な別のコンポーネントに分割して、その方向への最初のステップを実行します。
  完了したら、アプリはこの<live-example> </ live-example>のようになります。
  
.l-main-section
:marked
  ## あなたがどこで中断したか
  このページを開始する前に、Tour of Heroesの初期の構造と同じ構造であることを確認してください。
  そうでない場合は、前のページに戻ります。

.filetree
  .file angular-tour-of-heroes
  .children
    .file src
    .children
      .file app
      .children
        .file app.component.ts
        .file app.module.ts
      .file main.ts
      .file index.html
      .file styles.css
      .file systemjs.config.js
      .file tsconfig.json
    .file node_modules ...
    .file package.json
:marked
  Tour of Heroesを構築している間、アプリを蒸留して稼働させておく
  ターミナルウィンドウに `npm start`コマンドを入力すると
  [以前と同じように]（toh-pt1.html＃keep-transpiling "アプリを実行し続ける"）。

  ##ヒーローディテールコンポーネントを作る
  `hero-detail.component.ts`という名前のファイルを` app / `フォルダに追加します。
  このファイルは新しい `HeroDetailComponent`を保持します。

  ファイル名とコンポーネント名は、Angular
  [スタイルガイド]（../ guide / style-guide.html＃naming）

  * _class_ nameコンポーネントは、_upper camel case_で記述され、 "Component"という単語で終わる必要があります。
  主人公の詳細コンポーネントクラスは `HeroDetailComponent`です。

  *コンポーネント_ファイル_名は、[_lowerダッシュケース_]（../ guide / glossary.html＃ダッシュケース）で綴る必要があります。
  各単語はダッシュで区切られ、 `.component.ts`で終わります。
  `HeroDetailComponent`クラスは` hero-detail.component.ts`ファイルに入っています。

  次のように `HeroDetailComponent`を書き始めます：

+makeExample('toh-3/ts/app/hero-detail.component.1.ts', 'v1', 'app/hero-detail.component.ts (initial version)')(format=".")
a#selector
:marked
  コンポーネントを定義するには、常に `Component`シンボルをインポートします。

  `@ Component`デコレータは、コンポーネントのAngularメタデータを提供します。
  CSSセレクタ名 `hero-detail`は要素タグと一致します
  親コンポーネントのテンプレート内でこのコンポーネントを識別します。
  [このチュートリアルページの最後にある]（＃add-hero-detail "HeroDetailComponentをAppComponentに追加する"）、
  あなたは `<hero-detail>`要素を `AppComponent`テンプレートに追加します。

  いつでもコンポーネントクラスを `export 'するので、常にコンポーネントクラスを` export'します。
:marked
  ### ヒーロー詳細テンプレート
  ヒーローの詳細ビューを `HeroDetailComponent`に移動するには、
  主人公の詳細_content_を `AppComponent`テンプレートの一番下から切り取ってください
  それを `@ Component`メタデータの新しい` template`プロパティに貼り付けます。

  `HeroDetailComponent`は_hero_を持っていますが、選ばれたヒーローはありません。
  "selectedHero"という単語をテンプレートのどこにでも置いて "hero"という単語に置き換えます。
  完了したら、新しいテンプレートは次のようになります。

+makeExample('toh-3/ts/src/app/hero-detail.component.ts', 'template', 'src/app/hero-detail.component.ts (template)')(format=".")


:marked
  ### * hero *プロパティを追加する

  `HeroDetailComponent`テンプレートはコンポーネントの` hero`プロパティにバインドされます。
  そのようなプロパティを `HeroDetailComponent`クラスに追加します
+makeExample('toh-3/ts/app/hero-detail.component.1.ts', 'hero', 'src/app/hero-detail.component.ts (hero property)')
:marked  
`hero`プロパティは` Hero`のインスタンスとしてタイプされます。
  `Hero`クラスはまだ` app.component.ts`ファイルにあります。
  今、 `Hero`クラスを参照する必要がある2つのコンポーネントがあります。
  Angular [スタイルガイド]（../ guide / style-guide.html＃rule-of-one "スタイルガイド：1つのルール"）は、ファイルごとに1つのクラスを推奨します。

  `Hero`クラスを` app.component.ts`から `hero.ts`ファイルに移動してください。

+makeExample('toh-3/ts/src/app/hero.ts', '', 'src/app/hero.ts')(format=".")

:marked
  `Hero`クラスが独自のファイルになったので、` AppComponent`と `HeroDetailComponent`はそれをインポートする必要があります。
  `app.component.ts`と` hero-detail.component.ts`ファイルの最上部の次の `import`ステートメントを追加してください。
+makeExample('toh-3/ts/app/hero-detail.component.1.ts', 'hero-import')

:marked
  ### * hero *プロパティは* input *プロパティです

  [このページの後のほう]（＃add-hero-detail "HeroDetailComponentをAppComponentに追加"）、
  親 `AppComponent`は、どの主人が表示するかを子供に` HeroDetailComponent`と伝えます
  その `selectedHero`を` HeroDetailComponent`の `hero`プロパティに束縛することによって、
  バインディングは次のようになります。
+makeExample('toh-3/ts/app/app.component.1.html', 'hero-detail-binding')(format='.')
:marked
  `hero`プロパティの周りに等号（=）の左側に角括弧を置くと、
  プロパティバインディング式の* target *にします。
  * target *バインディング・プロパティーを* input *プロパティーとして宣言する必要があります。
  それ以外の場合、Angularはバインディングを拒否し、エラーをスローします。

  まず、 `@ angular / core` import文を修正して` Input`シンボルをインクルードします。
+makeExample('toh-3/ts/src/app/hero-detail.component.ts', 'import-input', 'src/app/hero-detail.component.ts (excerpt)')(format='.')

:marked
  次に、 `英雄 'が*入力*プロパティであると宣言します。
  先ほどインポートした `@ Input`デコレータで始まります。
+makeExample('toh-3/ts/src/app/hero-detail.component.ts', 'hero', 'src/app/hero-detail.component.ts (excerpt)')(format='.')
.l-sub-section
  :marked
    _input_プロパティの詳細については、
    [属性指令]（../ guide / attribute-directives.html＃why-input）ページ。

:marked
  それでおしまい。 `hero`プロパティは` HeroDetailComponent`クラス内の唯一のものです。
+makeExample('toh-3/ts/src/app/hero-detail.component.ts', 'class')(format='.')
:marked
  それが行うことは、 `hero`入力プロパティを使ってヒーローオブジェクトを受け取り、そのテンプレートでそのプロパティにバインドすることだけです。

  ここには完全な `HeroDetailComponent`があります。
+makeExample('toh-3/ts/src/app/hero-detail.component.ts', '', 'src/app/hero-detail.component.ts')

.l-main-section
:marked
  ## _AppModule_の_HeroDetailComponent_を宣言する
  すべてのコンポーネントは、1つのモジュールと1つのモジュールのみで宣言する必要があります。

  エディタで `app.module.ts`を開き、` HeroDetailComponent`をインポートして参照できます。
+makeExample('toh-3/ts/src/app/app.module.ts', 'hero-detail-import', 'src/app/app.module.ts')

:marked
`HeroDetailComponent`をモジュールの` declarations`配列に追加します。

+makeExample('toh-3/ts/src/app/app.module.ts', 'declarations', 'src/app/app.module.ts')(format='.')
:marked
  一般に、 `declarations`配列には、モジュールに属するアプリケーションコンポーネント、パイプ、およびディレクティブのリストが含まれています。
  他のコンポーネントがモジュールを参照するには、そのモジュール内でコンポーネントを宣言する必要があります。
  このモジュールは、2つのアプリケーションコンポーネント、 `AppComponent`と` HeroDetailComponent`だけを宣言します。
.l-sub-section
  :marked
    Angularモジュールの詳細については、[NgModules]（../guide/ngmodule.html "Angular Modules（NgModule）"）ガイドを参照してください。

a#add-hero-detail
.l-main-section
:marked
  ## _AppComponent_に_HeroDetailComponent_を追加します。
:marked
  `AppComponent`はまだマスター/詳細ビューです。
  それはあなたがテンプレートのその部分を切り取る前に、ヒーローの詳細をそれ自身で表示することでした。
  今度は `HeroDetailComponent`に委譲します。


  `hero-detail`はCSS [` selector`]（＃selector "HeroDetailComponent selector"）です
  `HeroDetailComponent`メタデータに追加します。
  これは `HeroDetailComponent`を表す要素のタグ名です。

  `AppComponent`テンプレートの一番下に` <hero-detail> `要素を追加し、
  ヒーローのディテールビューはどこにあるのか。

  マスター `AppComponent`と` HeroDetailComponent`を調整してください
  `AppComponent`の` selectedHero`プロパティをバインドすることによって
  `HeroDetailComponent`の` hero`プロパティに追加します。
+makeExample('toh-3/ts/app/app.component.1.html', 'hero-detail-binding', 'app.component.ts (excerpt)')(format='.')
:marked
 `selectedHero`が変更されるたびに、` HeroDetailComponent`は表示する新しいヒーローを取得します。

 修正された `AppComponent`テンプレートは次のようになります

+makeExample('toh-3/ts/src/app/app.component.ts', 'hero-detail-template', 'app.component.ts (excerpt)')(format='.')

.l-main-section
:marked
  ## 何が変わったの？
  [before]（./ toh-pt2.html）のように、ユーザーが主人公名をクリックするたびに、
  ヒーローの詳細の下にヒーローの詳細が表示されます。
  しかし、今は `HeroDetailView`がそれらの詳細を提示しています。

  元の `AppComponent`を2つのコンポーネントにリファクタリングすることで、現在も将来も利益が得られます：

  あなたは責任を減らすことによって `AppComponent`を単純化しました。

  1.あなたは `HeroDetailComponent`を豊かなヒーローエディタに進化させることができます
  親 `AppComponent`に触れずに。

  あなたはヒーローの詳細ビューに触れることなく `AppComponent`を進化させることができます。

  1.将来の親コンポーネントのテンプレートで `HeroDetailComponent`を再利用することができます。

  ###アプリの構造を見直す
  次の構造を持っていることを確認します。
  
.filetree
  .file angular-tour-of-heroes
  .children
    .file src
    .children
      .file app
      .children
        .file app.component.ts
        .file app.module.ts
        .file hero.ts
        .file hero-detail.component.ts
      .file main.ts
      .file index.html
      .file styles.css
      .file systemjs.config.js
      .file tsconfig.json
    .file node_modules ...
    .file package.json

:marked
  このページで解説するコードファイルは次のとおりです。
  
+makeTabs(`
  toh-3/ts/src/app/hero-detail.component.ts,
  toh-3/ts/src/app/app.component.ts,
  toh-3/ts/src/app/hero.ts,
  toh-3/ts/src/app/app.module.ts
  `,'',`
  src/app/hero-detail.component.ts,
  src/app/app.component.ts,
  src/app/hero.ts,
  src/app/app.module.ts
 `)

.l-main-section
:marked
  ## あなたが旅した道
  
  このページであなたが達成したことは次のとおりです。

  *再利用可能なコンポーネントを作成しました。
  *コンポーネントが入力を受け入れる方法を学びました。
  *必要なアプリケーション指令をAngularモジュールで宣言することを学びました。君は
  `NgModule`デコレータの` declarations`配列にディレクティブをリストアップしました。
  *親コンポーネントを子コンポーネントにバインドする方法を学びました。

  あなたのアプリはこの<live-example> </ live-example>のようになります。

.l-main-section
:marked
  ## 前の道
  Tour of Heroesアプリは共有コンポーネントでより再利用可能ですが、
  その（モック）データは `AppComponent`内でまだハードコーディングされています。
  それは持続可能ではありません。
  データアクセスは別のサービスにリファクタリングする必要があります
  データを必要とするコンポーネント間で共有されます。

  [次のチュートリアル]（toh-pt4.html）ページでサービスを作成する方法を学びます。
